I"!&<h2 id="엔티티-매니저-entitymanager">엔티티 매니저 (EntityManager)</h2>

<p>엔티티를 저장, 수정, 삭제, 조회 등 엔티티와 관련된 작업을 수행</p>

<p>@PersistenceContext 를 통해 EntityManager 를 주입 받아 사용</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Repository</span> <span class="o">{</span>

	<span class="nd">@PersistenceContext</span>
	<span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

	<span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">();</span>     <span class="c1">// 엔티티 조회</span>
	<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">();</span>  <span class="c1">// 엔티티 저장</span>
	<span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>   <span class="c1">// 엔티티 삭제</span>
	<span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>    <span class="c1">// 영속성 컨텍스트 내용을 데이터베이스에 반영</span>
	<span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">();</span>   <span class="c1">// 엔티티를 준영속 상태로 전환</span>
	<span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">();</span>    <span class="c1">// 준영속 상태의 엔티티를 영속상태로 변경</span>
	<span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>    <span class="c1">// 영속성 컨텍스트 초기화</span>
	<span class="n">em</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>    <span class="c1">// 영속성 컨텍스트 종료</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="영속성-컨텍스트-persistencecontext">영속성 컨텍스트 (PersistenceContext)</h2>

<p>논리적인 개념으로, 눈에 보이지 않는다.</p>

<p><code class="language-plaintext highlighter-rouge">Entity 를 영구 저장하는 환경</code></p>

<p>ex)</p>

<p>EntityManager.persist(entity);</p>

<p>→ 실제로 DB 에 저장하는 것이 아니라 영속성 컨텍스트를 통해서 Entity 를 영속화</p>

<p>→ 정확히 말하면 persist() 시점에서 Entity 를 영속성 컨텍스트에 저장하는 것</p>

<p><br /></p>

<h3 id="엔티티의-생명주기-entity-lifecycle">엔티티의 생명주기 (Entity LifeCycle)</h3>

<ul>
  <li>
    <p>비영속</p>

    <p>→ 영속성 컨텍스트와 전혀 관계 없음</p>

    <p>→ 객체를 생성만 한 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>영속</p>

    <p>→ 영속성 컨텍스트에 저장된 상태</p>

    <p>→ Entity 가 영속성 컨텍스트에 의해 관리되는 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@PersistentContext</span>
  <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

  <span class="c1">// 비영속</span>
  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>

  <span class="c1">// 영속</span>
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div>    </div>

    <p>영속 상태에서는 바로 DB 에 저장되지 않는다.</p>

    <p>transaction.commit();</p>

    <p>→ 트랜잭션의 commit 시점에 영속성 컨텍스트에 있는 정보들이 DB에 저장됨.</p>
  </li>
  <li>
    <p>준영속 (detached)</p>

    <p>→ 영속성 컨텍스트에 저장되었다가 분리된 상태</p>

    <p>→ 영속성 컨텍스트에서 지운상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">entityManager</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>삭제 (removed)</p>

    <p>→ 실제 DB 삭제를 요청한 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">entityManager</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<p>MemberRepository.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">jpabook.jpashop.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">jpabook.jpashop.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.EntityManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.PersistenceContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="c1">// Repository 어노테이션 사용해서 스프링 빈에 등록</span>
<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberRepository</span> <span class="o">{</span>

	<span class="c1">// 영속성 컨텍스트</span>
    <span class="nd">@PersistenceContext</span>
    <span class="kd">private</span> <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 엔티티를 영속성 컨텍스트에 저장, DB에 저장되진 않는다</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">findOne</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// em.find(TYPE, PK); : 1건 조회</span>
        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// jpql 사용</span>
		<span class="c1">// em.createQuery(Query, TYPE)</span>
        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m"</span><span class="o">,</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m where m.name = :name"</span><span class="o">,</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET