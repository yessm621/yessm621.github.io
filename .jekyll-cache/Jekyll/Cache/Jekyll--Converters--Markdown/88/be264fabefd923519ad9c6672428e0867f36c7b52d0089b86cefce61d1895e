I"`E<p><code class="language-plaintext highlighter-rouge">백기선님 강의 정리</code></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(1)/">REST API with SpringBoot(1)</a></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(2)/">REST API with SpringBoot(2)</a></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(3)/">REST API with SpringBoot(3)</a></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(4)/">REST API with SpringBoot(4)</a></p>

<p><br /></p>

<p>REST가 잘 적용된 API라면 응답에 HATEOAS를 지켜야 한다</p>

<p><br /></p>

<h2 id="hateoas란">HATEOAS란?</h2>

<p>REST API에서 클라이언트에 리소스를 넘겨줄 때 특정 부가적인 리소스의 링크 정보를 넘겨줌</p>

<p>links 요소를 통해 href 값의 형태로 보내주면 자원 상태에 대한 처리를 링크에 있는 URL을 통해 처리할 수 있게 된다.</p>

<p><br /></p>

<p>HATEOAS 링크에 들어가는 정보는 현재 Resource의 관계이자 링크의 레퍼런스 정보인 REL과 하이퍼링크인 HREF 두 정보가 들어간다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">예시</span><span class="w">
</span><span class="nl">"_links"</span><span class="p">:{</span><span class="w">
	</span><span class="nl">"self"</span><span class="p">:{</span><span class="w">
		</span><span class="nl">"href"</span><span class="p">:</span><span class="s2">"http://localhost/api/events/1"</span><span class="w">
	</span><span class="p">},</span><span class="w">
	</span><span class="nl">"query-events"</span><span class="p">:{</span><span class="w">
		</span><span class="nl">"href"</span><span class="p">:</span><span class="s2">"http://localhost/api/events"</span><span class="w">
	</span><span class="p">},</span><span class="w">
	</span><span class="nl">"update-event"</span><span class="p">:{</span><span class="w">
		</span><span class="nl">"href"</span><span class="p">:</span><span class="s2">"http://localhost/api/events/1"</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br /></p>

<ol>
  <li>링크를 만드는 기능
    <ul>
      <li>문자열을 가지고 만들기</li>
      <li>컨트롤러와 메소드로 만들기</li>
    </ul>
  </li>
  <li>리소스를 만드는 기능
    <ul>
      <li>리소스: 데이터(응답본문) + 링크</li>
    </ul>
  </li>
  <li>링크 찾아주는 기능
    <ul>
      <li>traverson</li>
      <li>LinkDiscoverers</li>
    </ul>
  </li>
  <li>링크
    <ul>
      <li>HREF</li>
      <li>REL(relation, 관계)
        <ul>
          <li>self</li>
          <li>profile</li>
          <li>update-event</li>
          <li>query-events</li>
          <li>…</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p><br /></p>

<p>참고)</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ResourceSupport</code> is now <code class="language-plaintext highlighter-rouge">RepresentationModel</code></li>
  <li><code class="language-plaintext highlighter-rouge">Resource</code> is now <code class="language-plaintext highlighter-rouge">EntityModel</code></li>
  <li><code class="language-plaintext highlighter-rouge">Resources</code> is now <code class="language-plaintext highlighter-rouge">CollectionModel</code></li>
  <li><code class="language-plaintext highlighter-rouge">PagedResources</code> is now <code class="language-plaintext highlighter-rouge">PagedModel</code></li>
</ul>

<p><br /></p>

<h3 id="테스트-코드">테스트 코드</h3>

<p>링크 정보를 제공하는 테스트 코드를 추가</p>

<ul>
  <li>self: 리소스에 대한 링크</li>
  <li>query-events: 이벤트 목록에 대한 링크</li>
  <li>update-event: 이벤트 수정에 대한 링크</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="o">...</span>

		<span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"정상적으로 이벤트를 생성하는 테스트"</span><span class="o">)</span>
    <span class="nd">@TestDescription</span><span class="o">(</span><span class="s">"정상적으로 이벤트를 생성하는 테스트"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createEvent</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">EventDto</span> <span class="n">event</span> <span class="o">=</span> <span class="nc">EventDto</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"Spring"</span><span class="o">)</span>
                <span class="o">...</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">post</span><span class="o">(</span><span class="s">"/api/events/"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaTypes</span><span class="o">.</span><span class="na">HAL_JSON</span><span class="o">)</span>
                <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">event</span><span class="o">)))</span>
                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span> <span class="c1">// 어떤 요청과 응답을 받았는지 알 수 있음</span>
                <span class="o">...</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"_links.self"</span><span class="o">).</span><span class="na">exists</span><span class="o">())</span> <span class="c1">// 3가지의 링크가 응답으로 오길 기다</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"_links.query-events"</span><span class="o">).</span><span class="na">exists</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"_links.update-event"</span><span class="o">).</span><span class="na">exists</span><span class="o">());</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="eventresource">EventResource</h3>

<p><code class="language-plaintext highlighter-rouge">RepresentationModel</code>를 상속받고 Event 객체를 주입받아 Getter 메서드를 활용하여 제공하는 방법</p>

<p>EventResource.java - 첫번째 방법</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">me.whiteship.demoinflearnrestapi.events</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonUnwrapped</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.hateoas.EntityModel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.hateoas.Link</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.hateoas.RepresentationModel</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventResource</span> <span class="kd">extends</span> <span class="nc">RepresentationModel</span> <span class="o">{</span>

    <span class="nd">@JsonUnwrapped</span>
    <span class="kd">private</span> <span class="nc">Event</span> <span class="n">event</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">EventResource</span><span class="o">(</span><span class="nc">Event</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">event</span> <span class="o">=</span> <span class="n">event</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Event</span> <span class="nf">getEvent</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">event</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@JsonUnwrapped</code> 을 사용하는 이유?</p>

<p>응답을 보낼 때 jackson(ObjectMapper)을 사용하여 serialization을 진행</p>

<p>즉, BeanSerializer를 사용하는데 BeanSerializer는 기본적으로 필드명을 사용. 따라서, Test Assertion조건에 맞지않음</p>

<p>응답 내부에 event가 존재하고 event에 정보가 있는 구조</p>

<p>→ @JsonUnwrapped는 property를 serialize/deserialize 과정에서 <strong>평탄화(flattened)</strong>한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 예시 */</span>

<span class="cm">/* @JsonUnwrapped 적용 전 */</span>
<span class="o">{</span>
  <span class="s">"id"</span> <span class="o">:</span> <span class="mi">1</span><span class="o">,</span>
  <span class="s">"name"</span> <span class="o">:</span> <span class="o">{</span>
    <span class="s">"firstName"</span> <span class="o">:</span> <span class="s">"seungmi"</span><span class="o">,</span>
    <span class="s">"lastName"</span> <span class="o">:</span> <span class="s">"noh"</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/* @JsonUnwrapped 적용 전 */</span>
<span class="o">{</span>
  <span class="s">"id"</span> <span class="o">:</span> <span class="mi">1</span><span class="o">,</span>
  <span class="s">"firstName"</span> <span class="o">:</span> <span class="s">"seungmi"</span><span class="o">,</span>
  <span class="s">"lastName"</span> <span class="o">:</span> <span class="s">"noh"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>EventResource.java - 두번째 방법</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventResource</span> <span class="kd">extends</span> <span class="nc">EntityModel</span><span class="o">&lt;</span><span class="nc">Event</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">EventResource</span><span class="o">(</span><span class="nc">Event</span> <span class="n">event</span><span class="o">,</span> <span class="nc">Link</span><span class="o">...</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">links</span><span class="o">));</span>
        <span class="n">add</span><span class="o">(</span><span class="n">linkTo</span><span class="o">(</span><span class="nc">EventController</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">slash</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">withSelfRel</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>RepresentationModel 하위 클래스에 <code class="language-plaintext highlighter-rouge">EntityModel</code> 라는 클래스가 존재</p>

<p>T에 해당하는 데이터가 content로 매핑 되는데 getContent() 메소드에 @JsonUnwrapped가 붙어있기 때문에 unwrap 된다.</p>

<p>따라서, 위의 코드처럼 두번째 방법을 사용해도 된다.</p>

<p><br /></p>

<p>EventController.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">createEvent</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nd">@Validated</span> <span class="nc">EventDto</span> <span class="n">eventDto</span><span class="o">,</span> <span class="nc">Errors</span> <span class="n">errors</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">errors</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">badRequest</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">errors</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">eventValidator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">eventDto</span><span class="o">,</span> <span class="n">errors</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">errors</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">badRequest</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">errors</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">Event</span> <span class="n">event</span> <span class="o">=</span> <span class="n">modelMapper</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">eventDto</span><span class="o">,</span> <span class="nc">Event</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">event</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>
        <span class="nc">Event</span> <span class="n">newEvent</span> <span class="o">=</span> <span class="n">eventRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="nc">WebMvcLinkBuilder</span> <span class="n">selfLinkBuilder</span> <span class="o">=</span> <span class="n">linkTo</span><span class="o">(</span><span class="nc">EventController</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">slash</span><span class="o">(</span><span class="n">newEvent</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="no">URI</span> <span class="n">createdUri</span> <span class="o">=</span> <span class="n">selfLinkBuilder</span><span class="o">.</span><span class="na">toUri</span><span class="o">();</span>
        <span class="nc">EventResource</span> <span class="n">eventResource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EventResource</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="n">eventResource</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">linkTo</span><span class="o">(</span><span class="nc">EventController</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">withRel</span><span class="o">(</span><span class="s">"query-events"</span><span class="o">));</span>
        <span class="n">eventResource</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">selfLinkBuilder</span><span class="o">.</span><span class="na">withRel</span><span class="o">(</span><span class="s">"update-event"</span><span class="o">));</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">createdUri</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">eventResource</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>withRel(): 이 링크가 리소스와 어떤 관계에 있는지 관계를 정의 할 수 있다</p>

<p>withSelRel(): 리소스에 대한 링크를 type-safe한 method로 제공한다</p>
:ET