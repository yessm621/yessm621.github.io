I"RZ<p><code class="language-plaintext highlighter-rouge">백기선님 강의 정리</code></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(1)/">REST API with SpringBoot(1)</a></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(2)/">REST API with SpringBoot(2)</a></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(3)/">REST API with SpringBoot(3)</a></p>

<p><a href="https://yessm621.github.io/springboot/Java-REST-API(4)/">REST API with SpringBoot(4)</a></p>

<p><br /></p>

<h2 id="event-생성-api-구현-bad-request-응답-본문-만들기">Event 생성 API 구현: Bad Request 응답 본문 만들기</h2>

<p>serialization: ‘객체 → json’ 으로 변환</p>

<p>deserialization: ‘json → 객체’ 로 변환</p>

<p><br /></p>

<p>body에 Bad Request에 대한 응답을 넣고 싶은데 관련 에러는 Errors에 담겨 있다</p>

<p>그런데, body에 error를 담으려고 하면 에러가 발생한다!</p>

<p>원인은 error를 json으로 변환할 수 없기 때문에..</p>

<p>그렇다면 왜 event 객체는 body에 담을 수 있었을까?</p>

<p>→ event는 objectMapper를 사용해서 객체에서 json으로 변환하는데 이때 bean serialization을 사용해서 자바빈 스팩을 준수했기 때문에 변환할수 있었던것..</p>

<p><br /></p>

<p>따라서, 아래 코드와 같이 error를 serialization 해주는 코드를 작성해야한다.</p>

<p><br /></p>

<p>common/ErrorsSerializer.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">me.whiteship.demoinflearnrestapi.common</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.JsonGenerator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.JsonSerializer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.SerializerProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.jackson.JsonComponent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@JsonComponent</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ErrorsSerializer</span> <span class="kd">extends</span> <span class="nc">JsonSerializer</span><span class="o">&lt;</span><span class="nc">Errors</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialize</span><span class="o">(</span><span class="nc">Errors</span> <span class="n">errors</span><span class="o">,</span> <span class="nc">JsonGenerator</span> <span class="n">jsonGenerator</span><span class="o">,</span> <span class="nc">SerializerProvider</span> <span class="n">serializerProvider</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStartArray</span><span class="o">();</span>
        <span class="n">errors</span><span class="o">.</span><span class="na">getFieldErrors</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStartObject</span><span class="o">();</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"field"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getField</span><span class="o">());</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"objectName"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getObjectName</span><span class="o">());</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"code"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getCode</span><span class="o">());</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"defaultMessage"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">());</span>
                <span class="nc">Object</span> <span class="n">rejectedValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getRejectedValue</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">rejectedValue</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"rejectedValue"</span><span class="o">,</span> <span class="n">rejectedValue</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                <span class="o">}</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeEndObject</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="n">errors</span><span class="o">.</span><span class="na">getGlobalErrors</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStartObject</span><span class="o">();</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"objectName"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getObjectName</span><span class="o">());</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"code"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getCode</span><span class="o">());</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="s">"defaultMessage"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">());</span>
                <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeEndObject</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">jsonGenerator</span><span class="o">.</span><span class="na">writeEndArray</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="jsoncomponent">@JsonComponent</h3>

<p>ObjectMapper 에 Custom Serializer를 등록해 주어야하는데 Spring Boot에서 제공하는 <code class="language-plaintext highlighter-rouge">@JsonComponent</code>를 사용하면 손쉽게 등록이 가능하다.</p>

<p><a href="http://json.parser.online.fr/">Json Parser Online</a></p>

<p><br /></p>

<h2 id="event-생성-api-구현-비즈니스-로직-적용">Event 생성 API 구현: 비즈니스 로직 적용</h2>

<p>event.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Update free</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">basePrice</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">maxPrice</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">free</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">free</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// Update offline</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">location</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">.</span><span class="na">isBlank</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">offline</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">offline</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="o">...</span>
</code></pre></div></div>

<p>entity test code 작성</p>

<p>EventTest.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="o">...</span>

	<span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFree</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Given</span>
        <span class="nc">Event</span> <span class="n">event</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">basePrice</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxPrice</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="c1">// When</span>
        <span class="n">event</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>

        <span class="c1">// Then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">isFree</span><span class="o">()).</span><span class="na">isTrue</span><span class="o">();</span>

        <span class="c1">// Given</span>
        <span class="n">event</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">basePrice</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxPrice</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="c1">// When</span>
        <span class="n">event</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>

        <span class="c1">// Then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">isFree</span><span class="o">()).</span><span class="na">isFalse</span><span class="o">();</span>

        <span class="c1">// Given</span>
        <span class="n">event</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">basePrice</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxPrice</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="c1">// When</span>
        <span class="n">event</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>

        <span class="c1">// Then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">isFree</span><span class="o">()).</span><span class="na">isFalse</span><span class="o">();</span>
    <span class="o">}</span>

	<span class="o">...</span>
</code></pre></div></div>

<p>위의 코드처럼 작성해도 되지만 중복이 발생하기 때문에 보기에 좋지 않다</p>

<p><code class="language-plaintext highlighter-rouge">JUnitParams</code> 를 이용하여 중복코드를 줄이고 테스트코드를 작성할 수 있다.</p>

<p><br /></p>

<h2 id="event-생성-api-구현-매개변수를-이용한-테스트">Event 생성 API 구현: 매개변수를 이용한 테스트</h2>

<p>dependency 추가</p>

<p>pom.xml</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>pl.pragmatists<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>JUnitParams<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.1.1<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>EventTest.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">me.whiteship.demoinflearnrestapi.events</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">junitparams.JUnitParamsRunner</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">junitparams.Parameters</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">JUnitParamsRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventTest</span> <span class="o">{</span>

    <span class="o">...</span>

    <span class="c1">//parametersFor: 컨벤션</span>
    <span class="kd">private</span> <span class="nc">Object</span><span class="o">[]</span> <span class="nf">parametersForTestFree</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">true</span><span class="o">},</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="mi">100</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="kc">false</span><span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@Parameters</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">"parametersForTestFree"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFree</span><span class="o">(</span><span class="kt">int</span> <span class="n">basePrice</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxPrice</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isFree</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Given</span>
        <span class="nc">Event</span> <span class="n">event</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">basePrice</span><span class="o">(</span><span class="n">basePrice</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxPrice</span><span class="o">(</span><span class="n">maxPrice</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="c1">// When</span>
        <span class="n">event</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>

        <span class="c1">// Then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">isFree</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">isFree</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Object</span><span class="o">[]</span> <span class="nf">parametersForTestOffline</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"강남"</span><span class="o">,</span> <span class="kc">true</span><span class="o">},</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">""</span><span class="o">,</span> <span class="kc">false</span><span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@Parameters</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testOffline</span><span class="o">(</span><span class="nc">String</span> <span class="n">location</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isOffline</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Given</span>
        <span class="nc">Event</span> <span class="n">event</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">location</span><span class="o">(</span><span class="n">location</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="c1">// When</span>
        <span class="n">event</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>

        <span class="c1">// Then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">isOffline</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">isOffline</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>parametersFor테스트코드명</p>

<p>→ 이렇게 작성하면 알아서 맵핑해준다.(코드 컨벤션, 규약)</p>
:ET