I"*-<h3 id="제어의-역전ioc-inversion-of-control">제어의 역전(IoC, Inversion of Control)</h3>

<p><strong>기존 프로그램</strong></p>

<p>클라이언트 구현 객체가 서버 구현 객체를 생성, 연결, 실행 했다. 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.</p>

<p><strong>AppConfig 등장</strong></p>

<p>구현 객체는 자신의 로직을 실행하는 역할만 담당. 프로그램의 제어 흐름은 AppConfig가 가져감. 예를 들어, OrderServiceImpl은 필요한 인터페이스들을 호출하지만 어떤 구현 객체들이 실행될지 모른다.</p>

<p>프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)이라 한다.</p>

<p><br /></p>

<h3 id="프레임워크-vs-라이브러리">프레임워크 vs 라이브러리</h3>

<ul>
  <li>프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크가 맞다. (JUnit)</li>
  <li>반면에 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 프레임워크가 아니라 라이브러리다.</li>
</ul>

<p><br /></p>

<h3 id="의존관계-주입di-dependency-injection">의존관계 주입(DI, Dependency Injection)</h3>

<ul>
  <li>OrderServiceImpl은 DiscountPolicy 인터페이스에 의존한다. 실제 어떤 구현 객체가 사용될지 모른다.</li>
  <li>의존관계는 <strong>정적인 클래스 의존 관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계</strong> 둘을 분리해서 생각해야 한다.</li>
</ul>

<p><br /></p>

<p><strong>정적인 클래스 의존 관계</strong></p>

<ul>
  <li>클래스가 사용하는 import를 보고 의존관계를 쉽게 판단</li>
  <li>애플리케이션을 실행하지 않아도 분석할 수 있다</li>
  <li>OrderServiceImpl은 MemberRepository, DiscountPolicy에 의존, 하지만 실제 어떤 객체가 OrderServiceImpl에 주입 될지 알 수 없음</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79130276/153976307-37820827-cfba-4b01-9827-92259bbc8315.png" alt="1" /></p>

<p><strong>동적인 객체(인스턴스) 의존 관계</strong></p>

<ul>
  <li>애플리케이션 <strong>실행 시점(런타임)</strong>에 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결되는 것을 <code class="language-plaintext highlighter-rouge">의존관계 주입</code>이라 한다</li>
  <li>객체 인스턴스를 생성하고 그 참조값을 전달해서 연결된다</li>
  <li>의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 호출하는 대상의 타입 인스턴스를 변경할 수 있다</li>
  <li>의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다</li>
</ul>

<p><br /></p>

<h3 id="di-컨테이너ioc-컨테이너">DI 컨테이너(=IoC 컨테이너)</h3>

<ul>
  <li>AppConfig 처럼 객체를 생성, 관리하면서 의존관계를 연결해 주는 것</li>
</ul>

<p><br /></p>

<h3 id="스프링-컨테이너">스프링 컨테이너</h3>

<p>AppConfig.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.core</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.core.discount.DiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.FixDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.order.OrderService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.order.OrderServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemoryMemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">OrderService</span> <span class="nf">orderService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OrderServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">(),</span> <span class="n">discountPolicy</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">DiscountPolicy</span> <span class="nf">discountPolicy</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">FixDiscountPolicy</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@Configuration: 설정정보에 붙이게 되있음</li>
  <li>@Bean을 붙이면 스프링 컨테이너라는 곳에 등록됨</li>
</ul>

<p><br /></p>

<p>MemberApp.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.core</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.core.member.Grade</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberApp</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//    AppConfig appConfig = new AppConfig();</span>
<span class="c1">//    MemberService memberService = appConfig.memberService();</span>
        <span class="nc">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">MemberService</span> <span class="n">memberService</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberService"</span><span class="o">,</span> <span class="nc">MemberService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="s">"memberA"</span><span class="o">,</span> <span class="nc">Grade</span><span class="o">.</span><span class="na">VIP</span><span class="o">);</span>
        <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findMember</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"new Member: "</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"find Member: "</span> <span class="o">+</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ApplicationContext</code>을 <code class="language-plaintext highlighter-rouge">스프링 컨테이너</code>라 함</li>
  <li>기존에는 AppConfig를 사용해서 DI를 했지만, 이제부턴 스프링 컨테이너를 통해서 사용</li>
  <li>스프링 컨테이너는 @Configuration 이 붙은 AppConfig 를 설정(구성) 정보로 사용. @Bean을 붙인 메서드는 모두 스프링 컨테이너에 등록된다. 이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.</li>
  <li>이전에는 개발자가 필요한 객체를 AppConfig 를 사용해서 직접 조회했지만, 이제부터는 스프링
컨테이너를 통해서 필요한 스프링 빈(객체)를 찾아야 한다. 스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.</li>
  <li>
    <p>기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고, 스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.</p>
  </li>
  <li>코드가 약간 더 복잡해진 것 같은데, 스프링 컨테이너를 사용하면 어떤 장점이 있을까?</li>
</ul>
:ET