I"?<h1 id="컴포넌트-스캔">컴포넌트 스캔</h1>

<h2 id="1-컴포넌트-스캔과-의존관계-자동-주입">1. 컴포넌트 스캔과 의존관계 자동 주입</h2>

<ul>
  <li>스프링 빈을 설정 정보에 일일이 등록하는 것은 매우 귀찮고 누락하는 문제도 생김</li>
  <li>따라서, 스프링은 설정 정보가 없어도 <strong>자동으로 스프링 빈을 등록</strong>하는 <code class="language-plaintext highlighter-rouge">컴포넌트 스캔</code>이라는 기능을 제공함</li>
  <li>의존관계를 자동으로 주입하는 <code class="language-plaintext highlighter-rouge">@Autowired</code> 기능 제공</li>
</ul>

<p><br /></p>

<p>컴포넌트 스캔을 사용하려면 <code class="language-plaintext highlighter-rouge">@ComponentScan</code>을 설정 정보에 붙여주면 된다. 또한, 의존관계를 명시하기 위해 <code class="language-plaintext highlighter-rouge">@Autowired</code> 를 추가하여 의존관계를 자동으로 주입해준다</p>

<p><br /></p>

<h3 id="componentscan"><strong>@ComponentScan</strong></h3>

<p>@ComponentScan은 @Component가 붙은 모든 클래스를 스프링 빈으로 등록</p>

<p><br /></p>

<h3 id="autowired-의존관계-자동-주입"><strong>@Autowired 의존관계 자동 주입</strong></h3>

<p>생성자에 @Autowired를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberServiceImpl</span> <span class="kd">implements</span> <span class="nc">MemberService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

		<span class="c1">// getBean(MemberRepository.class)와 동일</span>
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberServiceImpl</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>
		<span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="2-탐색-위치와-기본-스캔-대상">2. 탐색 위치와 기본 스캔 대상</h2>

<h3 id="탐색할-패키지의-시작-위치-지정">탐색할 패키지의 시작 위치 지정</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ComponentScan</span><span class="o">(</span>
	<span class="n">basePackages</span> <span class="o">=</span> <span class="s">"hello.core"</span><span class="o">,</span>
<span class="o">)</span>

<span class="c1">// 시작 위치를 여러개 지정할 수도 있음</span>
<span class="nd">@ComponentScan</span><span class="o">(</span>
	<span class="n">basePackages</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello.core"</span><span class="o">,</span> <span class="s">"hello.service"</span><span class="o">}</span>
<span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>basePackages: 탐색할 패키지의 시작위치 지정, 해당 패키지를 포함한 하위 패키지 모두 탐색</li>
</ul>

<p><br /></p>

<h3 id="권장하는-방법">권장하는 방법</h3>

<ul>
  <li>설정 정보 클래스의 위치를 <code class="language-plaintext highlighter-rouge">프로젝트 최상단</code>에 두는 것</li>
  <li>프로젝트 메인 설정 정보는 <strong>시작 루트 위치</strong>에 두는 것이 좋음</li>
  <li>스프링 부트의 경우에도 대표 시작 정보인 <strong>@SpringBootApplication</strong>을 프로젝트 시작 루트 위치에 두는 것이 관례</li>
</ul>

<p><br /></p>

<h3 id="컴포넌트-스캔-기본-대상-및-스프링이-제공하는-부가-기능">컴포넌트 스캔 기본 대상 및 스프링이 제공하는 부가 기능</h3>

<ul>
  <li>@Component: 컴포넌트 스캔에서 사용</li>
  <li>@Controller: <code class="language-plaintext highlighter-rouge">스프링 MVC 컨트롤러</code>에서 사용 및 인식</li>
  <li>@Service: 스프링 <code class="language-plaintext highlighter-rouge">비즈니스 로직</code>에서 사용, 개발자들이 비즈니스 계층을 인식하는데 도움이 됨</li>
  <li>@Repository: 스프링 <code class="language-plaintext highlighter-rouge">데이터 접근 계층</code>에서 사용 및 인식하고 데이터 계층의 예외를 스프링 예외로 변환해준다</li>
  <li>@Configuration: 스프링 설정 정보에서 사용 및 인식, 스프링 빈이 싱글톤을 유지하도록 추가 처리함</li>
</ul>

<p><br /></p>

<h2 id="3-필터">3. 필터</h2>

<ul>
  <li>includeFilters: 컴포넌트 스캔 대상을 추가로 지정</li>
  <li>excludeFilters: 컴포넌트 스캔에서 제회할 대상을 지정</li>
</ul>

<p><br /></p>

<h2 id="4-중복-등록과-충돌">4. 중복 등록과 충돌</h2>

<p>자동 빈 등록 vs 자동 빈 등록 → 오류 발생</p>

<p>수동 빈 등록 vs 자동 빈 등록 → 수동 빈이 우선권을 가짐</p>

<p>그러나, 최근 스프링 부트에서는 수동 빈 등록과 자동 빈 등록이 충돌나면 <strong>오류가 발생</strong>하도록 바꿈</p>
:ET