I"<p><br /></p>

<h2 id="1-checked-exception">1. Checked Exception</h2>

<hr />

<ul>
  <li>RuntimeException 을 상속받지 않는 예외</li>
  <li>예외 발생 시 롤백을 진행하지 않음</li>
</ul>

<p><br /></p>

<h2 id="2-unchecked-exception">2. Unchecked Exception</h2>

<hr />

<ul>
  <li>RuntimeException 을 상속받는 예외</li>
  <li>예외 발생 시 롤백 진행</li>
</ul>

<p><br /></p>

<h3 id="참고-오류-error">참고) 오류 (Error)</h3>

<p>예외란 개발자가 로직을 잘못 짰거나 사용자가 잘못된 값을 넘겨 정상적인 프로그램 흐름에 벗어나는 행위를 말함. 미리 예측하여 예외를 잡을 수 있다.</p>

<p>반면, 오류는 비정상적인 행위이기 때문에 이를 미리 예측해서 막을 수도 신경을 쓸 필요도 없다.</p>

<p><br />
<br /></p>

<h3 id="1-try-catch-finally">1. try-catch finally</h3>

<p>작성된 코드가 있는 메소드 안에서 직접적으로 예외처리를 해주는 방식</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
 <span class="c1">// 예외처리로 감쌀 로직 작성</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"정수변환이 안됨"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">ArrayIndexOutOfBoundsException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배열 범위가 벗어난경우"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">ArithmeticException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0 으로 나눌경우"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//예상 못했던 에러 =&gt; 처리</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"실행시 모든 에러를 처리"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Exception</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"수정이 가능한 모든 에러를 처리"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//error, Exception 둘 다 처리 가능</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"예외와 에러를 동시 처리"</span><span class="o">);</span>
<span class="k">finally</span> <span class="o">{</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"무조건 실행"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="2-throws-간접-처리-방식">2. throws 간접 처리 방식</h3>

<p>이 메소드 내에서 직접 에러를 처리 하지 않고, 해당 메소드를 호출한 쪽으로 예외처리를 던져 호출한 쪽에서 예외처리를 하게 회피하는 방식</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span> <span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="3-throw-예외-발생">3. throw 예외 발생</h3>

<p>강제로 예외처리를 발생하는 방법</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	<span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="o">(</span><span class="s">"예외처리 발생!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br /></p>
:ET