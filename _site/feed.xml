<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-23T00:38:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">yessm621.dev</title><subtitle>An amazing website.</subtitle><author><name>승미</name></author><entry><title type="html">스프링 기본원리 목차</title><link href="http://localhost:4000/series/SpringSeries/" rel="alternate" type="text/html" title="스프링 기본원리 목차" /><published>2023-09-23T00:00:00+09:00</published><updated>2023-09-23T00:00:00+09:00</updated><id>http://localhost:4000/series/SpringSeries</id><content type="html" xml:base="http://localhost:4000/series/SpringSeries/"><![CDATA[<h2 id="스프링-기본-원리-a-to-z">스프링 기본 원리 A to Z</h2>

<ol>
  <li><a href="https://yessm621.github.io/springboot/SOLID/">좋은 객체 지향 설계의 원칙: SOLID</a></li>
  <li><a href="https://yessm621.github.io/springboot/DipOcpDi/">DIP, OCP와 의존관계 주입(DI)</a></li>
  <li><a href="https://yessm621.github.io/springboot/IoCDI/">IoC와 DI</a></li>
  <li><a href="https://yessm621.github.io/springboot/SpringContainerBean/">스프링 컨테이너와 스프링 빈</a></li>
  <li><a href="https://yessm621.github.io/springboot/Singleton/">싱글톤 컨테이너</a></li>
  <li><a href="https://yessm621.github.io/springboot/ComponentScan/">컴포넌트 스캔</a></li>
  <li><a href="https://yessm621.github.io/springboot/DependencyInjection/">의존관계 주입 방법</a></li>
  <li><a href="https://yessm621.github.io/springboot/BeanLifeCycle/">빈 생명주기 콜백</a></li>
  <li><a href="https://yessm621.github.io/springboot/BeanScope/">빈 스코프</a></li>
</ol>]]></content><author><name>승미</name></author><category term="Series" /><category term="SpringBoot" /><summary type="html"><![CDATA[스프링 기본 원리 A to Z]]></summary></entry><entry><title type="html">스프링 MVC 목차</title><link href="http://localhost:4000/series/SpringMvcSeries/" rel="alternate" type="text/html" title="스프링 MVC 목차" /><published>2023-09-23T00:00:00+09:00</published><updated>2023-09-23T00:00:00+09:00</updated><id>http://localhost:4000/series/SpringMvcSeries</id><content type="html" xml:base="http://localhost:4000/series/SpringMvcSeries/"><![CDATA[<h2 id="스프링-mvc-a-to-z">스프링 MVC A to Z</h2>

<ol>
  <li><a href="https://yessm621.github.io/springboot/Servlet/">서블릿</a></li>
  <li><a href="https://yessm621.github.io/springboot/Thread/">쓰레드와 쓰레드 풀</a></li>
  <li><a href="https://yessm621.github.io/springboot/MVCPattern/">MVC 패턴</a></li>
  <li><a href="https://yessm621.github.io/springboot/FrontController/">구 MVC 패턴과 프론트 컨트롤러</a></li>
  <li><a href="https://yessm621.github.io/springboot/DispatcherServlet/">디스패처 서블릿</a></li>
  <li><a href="https://yessm621.github.io/springboot/HTTPMessageConverter/">HTTP 메시지 컨버터</a></li>
  <li><a href="https://yessm621.github.io/springboot/RequestMappingHandlerAdapter/">요청 매핑 핸들러 어댑터 구조</a></li>
  <li><a href="https://yessm621.github.io/springboot/PRG/">PRG Post/Redirect/Get</a></li>
</ol>]]></content><author><name>승미</name></author><category term="Series" /><category term="SpringBoot" /><summary type="html"><![CDATA[스프링 MVC A to Z]]></summary></entry><entry><title type="html">RestAPI with 스프링부트 목차</title><link href="http://localhost:4000/series/RestAPISeries/" rel="alternate" type="text/html" title="RestAPI with 스프링부트 목차" /><published>2023-09-19T00:00:00+09:00</published><updated>2023-09-19T00:00:00+09:00</updated><id>http://localhost:4000/series/RestAPISeries</id><content type="html" xml:base="http://localhost:4000/series/RestAPISeries/"><![CDATA[<h2 id="restapi-with-스프링부트-a-to-z">RestAPI with 스프링부트 A to Z</h2>

<ol>
  <li><a href="https://yessm621.github.io/springboot/Java-REST-API(1)/">REST API with SpringBoot(1)</a></li>
  <li><a href="https://yessm621.github.io/springboot/Java-REST-API(2)/">REST API with SpringBoot(2)</a></li>
  <li><a href="https://yessm621.github.io/springboot/Java-REST-API(3)/">REST API with SpringBoot(3)</a></li>
  <li><a href="https://yessm621.github.io/springboot/Java-REST-API(4)/">REST API with SpringBoot(4)</a></li>
  <li><a href="https://yessm621.github.io/springboot/Java-HATEOAS/">스프링 HATEOAS</a></li>
  <li><a href="https://yessm621.github.io/springboot/SpringRESTDocs/">스프링 REST Docs</a></li>
</ol>]]></content><author><name>승미</name></author><category term="Series" /><category term="SpringBoot" /><category term="RestAPI" /><summary type="html"><![CDATA[RestAPI with 스프링부트 A to Z]]></summary></entry><entry><title type="html">JPA 목차</title><link href="http://localhost:4000/series/JPASeries/" rel="alternate" type="text/html" title="JPA 목차" /><published>2023-09-19T00:00:00+09:00</published><updated>2023-09-19T00:00:00+09:00</updated><id>http://localhost:4000/series/JPASeries</id><content type="html" xml:base="http://localhost:4000/series/JPASeries/"><![CDATA[<h2 id="jpa-a-to-z">JPA A to Z</h2>

<ol>
  <li><a href="https://yessm621.github.io/jpa/ORMJPAHibernate/">ORM과 JPA, Hibernate</a></li>
  <li><a href="https://yessm621.github.io/jpa/PersistenceContext/">영속성 컨텍스트</a></li>
  <li><a href="https://yessm621.github.io/jpa/EntityManger/">엔티티 매니저 팩토리와 엔티티 매니저</a></li>
  <li><a href="https://yessm621.github.io/jpa/Flush/">플러시</a></li>
  <li><a href="https://yessm621.github.io/jpa/DetachedEndity/">준영속</a></li>
  <li><a href="https://yessm621.github.io/jpa/JPAMapping/">연관 관계 매핑</a></li>
  <li><a href="https://yessm621.github.io/jpa/ConvenienceMethod/">연관관계 편의 메서드</a></li>
  <li><a href="https://yessm621.github.io/jpa/MappedBy/">연관관계의 주인과 mappedBy</a></li>
  <li><a href="https://yessm621.github.io/jpa/JPA-Auditing/">JPA Auditing (공통 매핑 정보)</a></li>
  <li><a href="https://yessm621.github.io/jpa/Proxy/">프록시, 즉시로딩과 지연로딩</a></li>
  <li><a href="https://yessm621.github.io/jpa/Cascade/">영속성 전이(Cascade), 고아 객체</a></li>
  <li><a href="https://yessm621.github.io/jpa/ValueType/">값 타입</a></li>
</ol>]]></content><author><name>승미</name></author><category term="Series" /><category term="Jpa" /><summary type="html"><![CDATA[JPA A to Z]]></summary></entry><entry><title type="html">SSE(Server-Send Events)</title><link href="http://localhost:4000/springboot/SSE/" rel="alternate" type="text/html" title="SSE(Server-Send Events)" /><published>2023-07-30T00:00:00+09:00</published><updated>2023-07-30T00:00:00+09:00</updated><id>http://localhost:4000/springboot/SSE</id><content type="html" xml:base="http://localhost:4000/springboot/SSE/"><![CDATA[<h1 id="sseserver-send-events">SSE(Server-Send Events)</h1>

<p>HTTP는 비연결성 프로토콜이다. 클라이언트와 서버가 연결되고 요청과 응답을 주고 받으면 연결을 끊는다. HTTP는 전통적인 Client-Server 모델로 클라이언트가 서버에 요청을 보내면 서버는 클라이언트의 요청에 대한 응답을 한다. 보통은 서버가 클라이언트에게 요청을 할 일이 거의 없다.</p>

<p>이러한 특징 때문에 HTTP에서 실시간으로 서비스를 제공하기 어렵다. 예를 들면 SNS의 알림 같은 경우가 그렇다. 사용자가 새로고침을 하지 않는 이상 새로 발생한 알림에 대해 사용자가 알기 어렵다. 이렇게 웹 애플리케이션을 개발하다보면 클라이언트의 요청이 없어도 서버에서 데이터를 전달해줘야 하는 경우가 발생한다.</p>

<p>이 문제를 해결하기 위한 방법은 세가지가 있다.</p>

<h2 id="polling">Polling</h2>

<p>Polling은 일정 주기를 가지고 서버로 요청을 보내는 방법이다. 일정 시간마다 서버에 요청을 보내 데이터가 갱신되었는지 확인하고 갱신되었다면 데이터를 응답받는다.</p>

<p>하지만 Polling은 실시간으로 데이터가 업데이트 되지 않는다는 단점이 있다. 또한, 불필요한 요청이 발생 할 수도 있고 이에 따른 서버 부하가 발생한다. 이는 대규모 트래픽에 적합하지 않다.</p>

<h2 id="long-polling">Long-Polling</h2>

<p>Long-Polling은 서버로 요청이 들어올 경우 일정 시간동안 대기 하였다가 요청한 데이터가 업데이트 된 경우 서버에서 웹 브라우저로 응답을 보낸다. 서버의 데이터가 빈번하게 변하지 않는 경우에 적합하다. Polling보단 개선된 형태이지만 데이터 업데이트가 빈번한 경우엔 마찬가지로 부하가 발생하여 대규모 트래픽에 적합하지 않다.</p>

<h2 id="sseserver-send-events-1">SSE(Server-Send Events)</h2>

<p>SSE는 클라이언트에서 서버쪽으로 특정 이벤트를 구독함을 알려주면 그 이후엔 서버에서 데이터 변화가 있을 때마다 서버에서 클라이언트에게 데이터를 보내줄 수 있다. 다만 서버에서 클라이언트로만 데이터 전송이 가능하고 그 반대는 불가능하다. 따라서 알림 기능에 매우 적합하다.</p>

<p><img width="569" alt="스크린샷 2023-07-28 오후 12 08 15" src="https://github.com/yessm621/yessm621.github.io/assets/79130276/16b02f68-fed1-4e90-ae8b-f0189d5c4907" /></p>

<p>이 외에도 서버에서 웹브라우저 사이 양방향 통신이 가능한 방법인 WebSocket도 있다. WebSocket은 채팅에 적합하다.</p>

<p>여기까지 서버에서 클라이언트에게 요청을 보낼 수 있는 방법을 알아보았다.</p>

<p>이제 SSE(Server-Send Events)를 사용해서 실시간으로 알림을 받을 수 있는 서비스를 만들어보자.</p>

<h2 id="sse-구현">SSE 구현</h2>

<p>먼저 http://localhost:8080/api/v1/users/alarm/subscribe를 통해 클라이언트가 서버에게 특정 이벤트가 발생하였을 때 구독한다는 것을 알려준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.me.sns.controller</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/v1/users"</span><span class="o">)</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/alarm/subscribe"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">SseEmitter</span> <span class="nf">subscribe</span><span class="o">(</span><span class="nc">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Authentication을 이용해서 User를 가져왔다고 가정</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="nc">User</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">alarmService</span><span class="o">.</span><span class="na">connectAlarm</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.me.sns.service</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AlarmService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">Long</span> <span class="no">DEFAULT_TIMEOUT</span> <span class="o">=</span> <span class="mi">60L</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">ALARM_NAME</span> <span class="o">=</span> <span class="s">"alarm"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">EmitterRepository</span> <span class="n">emitterRepository</span><span class="o">;</span>

    <span class="c1">// SseEmitter를 사용해서 알림을 보낼 때 사용</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">alarmId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 로그인 한 유저의 SseEmitter 가져오기</span>
        <span class="n">emitterRepository</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">userId</span><span class="o">).</span><span class="na">ifPresentOrElse</span><span class="o">(</span><span class="n">sseEmitter</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">sseEmitter</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">sseEmitter</span><span class="o">.</span><span class="na">event</span><span class="o">().</span><span class="na">id</span><span class="o">(</span><span class="n">alarmId</span><span class="o">.</span><span class="na">toString</span><span class="o">()).</span><span class="na">name</span><span class="o">(</span><span class="no">ALARM_NAME</span><span class="o">).</span><span class="na">data</span><span class="o">(</span><span class="s">"new alarm"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">emitterRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">SnsApplicationException</span><span class="o">(</span><span class="nc">ErrorCode</span><span class="o">.</span><span class="na">ALARM_CONNECT_ERROR</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"No emitter founded"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="c1">// 클라이언트가 서버에게 연결을 요청</span>
    <span class="kd">public</span> <span class="nc">SseEmitter</span> <span class="nf">connectAlarm</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SseEmitter</span> <span class="n">sseEmitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SseEmitter</span><span class="o">(</span><span class="no">DEFAULT_TIMEOUT</span><span class="o">);</span>
        <span class="n">emitterRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">sseEmitter</span><span class="o">);</span>

        <span class="c1">// 시간 초과, 네트워크 오류를 포함한 모든 이유로 비동기 요청이 정상 동작할 수 없을 때 저장해둔 SseEmitter를 삭제함.</span>
        <span class="n">sseEmitter</span><span class="o">.</span><span class="na">onCompletion</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">emitterRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userId</span><span class="o">));</span>
        <span class="n">sseEmitter</span><span class="o">.</span><span class="na">onTimeout</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">emitterRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userId</span><span class="o">));</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 연결 요청에 의해 SseEmitter가 생성되면 더미 데이터를 보내줘야함.</span>
            <span class="c1">// 연결된 후 하나의 데이터도 전송되지 않는다면 SseEmitter의 유효시간이 끝났을 경우,</span>
            <span class="c1">// 503 응답이 발생하므로 연결시 바로 더미 데이터를 한 번 보내준다.</span>
            <span class="n">sseEmitter</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="nc">SseEmitter</span><span class="o">.</span><span class="na">event</span><span class="o">().</span><span class="na">id</span><span class="o">(</span><span class="s">"id"</span><span class="o">).</span><span class="na">name</span><span class="o">(</span><span class="no">ALARM_NAME</span><span class="o">).</span><span class="na">data</span><span class="o">(</span><span class="s">"connect complete"</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">SnsApplicationException</span><span class="o">(</span><span class="nc">ErrorCode</span><span class="o">.</span><span class="na">ALARM_CONNECT_ERROR</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sseEmitter</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.me.sns.repository</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmitterRepository</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">SseEmitter</span><span class="o">&gt;</span> <span class="n">emitterMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nc">SseEmitter</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">userId</span><span class="o">,</span> <span class="nc">SseEmitter</span> <span class="n">sseEmitter</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKey</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="n">emitterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">sseEmitter</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Set sseEmitter {}"</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sseEmitter</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">SseEmitter</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKey</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Get sseEmitter {}"</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">emitterMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">emitterMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">getKey</span><span class="o">(</span><span class="n">userId</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">getKey</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Emitter:UID"</span> <span class="o">+</span> <span class="n">userId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>승미</name></author><category term="SpringBoot" /><category term="SpringBoot" /><category term="SSE" /><summary type="html"><![CDATA[SSE(Server-Send Events)]]></summary></entry><entry><title type="html">Spring Security</title><link href="http://localhost:4000/springboot/Spring-SpringSecurity/" rel="alternate" type="text/html" title="Spring Security" /><published>2023-06-05T00:00:00+09:00</published><updated>2023-06-05T00:00:00+09:00</updated><id>http://localhost:4000/springboot/Spring-SpringSecurity</id><content type="html" xml:base="http://localhost:4000/springboot/Spring-SpringSecurity/"><![CDATA[<h1 id="spring-security-적용하기">Spring Security 적용하기</h1>

<p>Spring Security 5.7 버전부터 기존에 사용하던 스프링 시큐리티 적용 방식과 많이 달라졌다. 이 부분에 대해 정리하기 위해 이 포스트를 작성하게 되었다.</p>

<p>Spring Security와 관련된 포스트는 두번에 거쳐 작성할 예정이다.</p>

<p>이번 포스트는 Spring Security를 적용하는 방법에 대해 작성할 것이고 다음 포스트는 작성 스프링 시큐리티를 테스트 코드에 어떻게 적용할 지에 대해 작성하도록 하겠다.</p>

<p>이제 Spring Security를 적용하는 방법에 대해 알아보자.</p>

<h2 id="dependency-추가">dependency 추가</h2>

<p>먼저 스프링 시큐리티를 사용하기 위한 디펜던시를 추가해야한다. 참고로 <code class="language-plaintext highlighter-rouge">spring-boot-starter-thymeleaf</code>를 추가한 이유는 타임리프에서 시큐리티 관련 내용을 작성할 때 필요한 디펜던시인 <code class="language-plaintext highlighter-rouge">thymeleaf-extras-springsecurity5</code>을 추가하기 위해서이다.</p>

<p><strong>build.gradle</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    testImplementation 'org.springframework.security:spring-security-test'
}
</code></pre></div></div>

<h2 id="httpsecurity-구성">HttpSecurity 구성</h2>

<p>이제 본격적으로 시큐리티를 적용하기 위한 코드를 작성해보자.</p>

<p>기존의 시큐리티 관련 설정은 WebSecurityConfigurerAdapter를 상속받아 작성하였다. 하지만 스프링 시큐리티 5.7부터는 SecurityFilterChain을 빈으로 등록하여 사용하는 것으로 바뀌었다. WebSecurityConfigurerAdapter는 deprecated 되었으므로 사용하지 않는 것이 좋다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="nc">WebSecurityConfigurerAdapter</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
            <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">((</span><span class="n">authz</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">authz</span>
                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
            <span class="o">)</span>
            <span class="o">.</span><span class="na">httpBasic</span><span class="o">(</span><span class="n">withDefaults</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>SecurityFilterChain을 빈으로 등록하여 사용하면 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">http</span>
            <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">auth</span> <span class="o">-&gt;</span> <span class="n">auth</span>
                    <span class="o">.</span><span class="na">mvcMatchers</span><span class="o">(</span>
                            <span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span>
                            <span class="s">"/"</span><span class="o">,</span>
                            <span class="s">"/articles"</span><span class="o">,</span>
                            <span class="s">"/articles/search-hashtag"</span>
                    <span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
            <span class="o">)</span>
            <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>
            <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
            <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="websercurity-구성">WebSercurity 구성</h2>

<p>스프링 시큐리티 5.7 이전엔 정적 리소스(css, js 등)를 무시하기 위해 아래와 같은 코드를 사용했었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="nc">WebSecurityConfigurerAdapter</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">WebSecurity</span> <span class="n">web</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/ignore1"</span><span class="o">,</span> <span class="s">"/ignore2"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>이 역시도 기존에 사용하던 WebSecurityConfigurerAdapter이 <strong>deprecated</strong> 되었기 때문에 아래와 같은 새로운 방식으로 적용해야 한다. WebSecurityCustomizer에 경로를 작성하게 되면 스프링 시큐리티 검사에서 아예 제외된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">WebSecurityCustomizer</span> <span class="nf">webSecurityCustomizer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">web</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/ignore1"</span><span class="o">,</span> <span class="s">"/ignore2"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 코드 처럼 경로를 하나씩 지정해주어도 되지만 스프링에서 제공하는 정적 리소스 경로가 있다. 그 내용을 적용하면 아래와 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">WebSecurityCustomizer</span> <span class="nf">webSecurityCustomizer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">web</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">()</span>
                <span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="nc">PathRequest</span><span class="o">.</span><span class="na">toStaticResources</span><span class="o">().</span><span class="na">atCommonLocations</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그런데, WebSecurityCustomizer를 사용하게 되면 애플리케이션 시작할 때 warn이 발생하는데 그 내용은 <code class="language-plaintext highlighter-rouge">HttpSecurity에서 작성하는 방식으로 하는 것을 추천한다</code>고 한다.</p>

<p>따라서, 위의 코드는 아래와 같이 수정했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">http</span>
            <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">auth</span> <span class="o">-&gt;</span> <span class="n">auth</span>
                    <span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span>
                            <span class="nc">PathRequest</span><span class="o">.</span><span class="na">toStaticResources</span><span class="o">().</span><span class="na">atCommonLocations</span><span class="o">()</span>
                    <span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">mvcMatchers</span><span class="o">(</span>
                            <span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span>
                            <span class="s">"/"</span><span class="o">,</span>
                            <span class="s">"/articles"</span><span class="o">,</span>
                            <span class="s">"/articles/search-hashtag"</span>
                    <span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
            <span class="o">)</span>
            <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>
            <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
            <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()</li>
</ul>

<h2 id="인증-정보">인증 정보</h2>

<p>UserDetailsService를 사용하여 인증 정보를 가져온다. 인증 정보는 DB에 있으므로 계정관련 리포지토리 빈을 불러와야 한다. (UserAccountRepository)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">(</span><span class="nc">UserAccountRepository</span> <span class="n">userAccountRepository</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">username</span> <span class="o">-&gt;</span> <span class="n">userAccountRepository</span>
            <span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">username</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">UserAccountDto:</span><span class="o">:</span><span class="n">from</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">BoardPrincipal:</span><span class="o">:</span><span class="n">from</span><span class="o">)</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">UsernameNotFoundException</span><span class="o">(</span><span class="s">"사용자를 찾을 수 없습니다. - username: "</span> <span class="o">+</span> <span class="n">username</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 코드는 UserDetailsService의 loadUserByUsername을 람다식으로 구현한 것이다. UsernameNotFoundException은 loadUserByUsername 스펙에 정의되어 있는 것이다.</p>

<h3 id="boardprincipal-작성">BoardPrincipal 작성</h3>

<p>BoardPrincipal은 UserDetails를 구현해야 한다. BoardPrincipal은 로그인이 된 상태라면 계정 정보를 담고 있다. 현재 BoardPrincipal에서는 권한에 대한 부분을 구현하지 않았다. 따라서, RoleType을 USER로 고정해두었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.test.projectboard.dto.UserAccountDto</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.GrantedAuthority</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.authority.SimpleGrantedAuthority</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>

<span class="kd">public</span> <span class="n">record</span> <span class="nf">BoardPrincipal</span><span class="o">(</span>
        <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
        <span class="nc">String</span> <span class="n">password</span><span class="o">,</span>
        <span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">,</span>
        <span class="nc">String</span> <span class="n">email</span><span class="o">,</span>
        <span class="nc">String</span> <span class="n">nickname</span><span class="o">,</span>
        <span class="nc">String</span> <span class="n">memo</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">UserDetails</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">BoardPrincipal</span> <span class="nf">of</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">nickname</span><span class="o">,</span> <span class="nc">String</span> <span class="n">memo</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">RoleType</span><span class="o">&gt;</span> <span class="n">roleTypes</span> <span class="o">=</span> <span class="nc">Set</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">RoleType</span><span class="o">.</span><span class="na">USER</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">BoardPrincipal</span><span class="o">(</span>
                <span class="n">username</span><span class="o">,</span>
                <span class="n">password</span><span class="o">,</span>
                <span class="n">roleTypes</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">RoleType:</span><span class="o">:</span><span class="n">getName</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">SimpleGrantedAuthority:</span><span class="o">:</span><span class="k">new</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toUnmodifiableSet</span><span class="o">()),</span>
                <span class="n">email</span><span class="o">,</span>
                <span class="n">nickname</span><span class="o">,</span>
                <span class="n">memo</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">BoardPrincipal</span> <span class="nf">from</span><span class="o">(</span><span class="nc">UserAccountDto</span> <span class="n">dto</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">BoardPrincipal</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="n">dto</span><span class="o">.</span><span class="na">userId</span><span class="o">(),</span>
                <span class="n">dto</span><span class="o">.</span><span class="na">userPassword</span><span class="o">(),</span>
                <span class="n">dto</span><span class="o">.</span><span class="na">email</span><span class="o">(),</span>
                <span class="n">dto</span><span class="o">.</span><span class="na">nickname</span><span class="o">(),</span>
                <span class="n">dto</span><span class="o">.</span><span class="na">memo</span><span class="o">()</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">UserAccountDto</span> <span class="nf">toDto</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">UserAccountDto</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="n">username</span><span class="o">,</span>
                <span class="n">password</span><span class="o">,</span>
                <span class="n">email</span><span class="o">,</span>
                <span class="n">nickname</span><span class="o">,</span>
                <span class="n">memo</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 권한에 대한 부분</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="nf">getAuthorities</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">authorities</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonExpired</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonLocked</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCredentialsNonExpired</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEnabled</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">enum</span> <span class="nc">RoleType</span> <span class="o">{</span>
        <span class="no">USER</span><span class="o">(</span><span class="s">"ROLE_USER"</span><span class="o">);</span>

        <span class="nd">@Getter</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

        <span class="nc">RoleType</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>참고</strong> 인증과 권한
<br />
간단히 말하면 인증은 로그인 여부, 권한은 로그인한 사용자가 어떠한 권한(사용자, 관리자 등)을 가지고 있는지에 대한 부분이다. 인증과 권한은 다르다.</p>

</blockquote>

<h2 id="passwordencoder-작성">PasswordEncoder 작성</h2>

<p>createDelegatingPasswordEncoder()는 패스워드 인코더 설정을 팩토리로부터 위임해서 가져오겠다는 뜻이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">PasswordEncoderFactories</span><span class="o">.</span><span class="na">createDelegatingPasswordEncoder</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="spring-security-최종-코드">Spring Security 최종 코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.test.projectboard.dto.UserAccountDto</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.test.projectboard.dto.security.BoardPrincipal</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.test.projectboard.repository.UserAccountRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.security.servlet.PathRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.HttpMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.crypto.factory.PasswordEncoderFactories</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.SecurityFilterChain</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">http</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">auth</span> <span class="o">-&gt;</span> <span class="n">auth</span>
                        <span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span>
                                <span class="nc">PathRequest</span><span class="o">.</span><span class="na">toStaticResources</span><span class="o">().</span><span class="na">atCommonLocations</span><span class="o">()</span>
                        <span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">mvcMatchers</span><span class="o">(</span>
                                <span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span>
                                <span class="s">"/"</span><span class="o">,</span>
                                <span class="s">"/articles"</span><span class="o">,</span>
                                <span class="s">"/articles/search-hashtag"</span>
                        <span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
                <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">(</span><span class="nc">UserAccountRepository</span> <span class="n">userAccountRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">username</span> <span class="o">-&gt;</span> <span class="n">userAccountRepository</span>
                <span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">username</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">UserAccountDto:</span><span class="o">:</span><span class="n">from</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">BoardPrincipal:</span><span class="o">:</span><span class="n">from</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">UsernameNotFoundException</span><span class="o">(</span><span class="s">"사용자를 찾을 수 없습니다. - username: "</span> <span class="o">+</span> <span class="n">username</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">PasswordEncoderFactories</span><span class="o">.</span><span class="na">createDelegatingPasswordEncoder</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="spring-security와-auditoraware">Spring Security와 AuditorAware</h2>

<p>AuditorAware를 사용하여 로그인한 사람의 정보를 가져올 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.test.projectboard.dto.security.BoardPrincipal</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.AuditorAware</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.config.EnableJpaAuditing</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.Authentication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.context.SecurityContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.context.SecurityContextHolder</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="nd">@EnableJpaAuditing</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JpaConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">AuditorAware</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">auditorAware</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">())</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">SecurityContext:</span><span class="o">:</span><span class="n">getAuthentication</span><span class="o">)</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Authentication:</span><span class="o">:</span><span class="n">isAuthenticated</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Authentication:</span><span class="o">:</span><span class="n">getPrincipal</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nc">BoardPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">::</span><span class="n">cast</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">BoardPrincipal:</span><span class="o">:</span><span class="n">getUsername</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="reference">Reference.</h2>

<p><a href="https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter">Spring Security without the WebSecurityConfigurerAdapter</a></p>]]></content><author><name>승미</name></author><category term="SpringBoot" /><category term="SpringBoot" /><summary type="html"><![CDATA[Spring Security 적용하기]]></summary></entry><entry><title type="html">findById() vs getReferenceById() (feat. getOne())</title><link href="http://localhost:4000/jpa/JPA-findById-getReferenceById/" rel="alternate" type="text/html" title="findById() vs getReferenceById() (feat. getOne())" /><published>2023-05-15T00:00:00+09:00</published><updated>2023-05-15T00:00:00+09:00</updated><id>http://localhost:4000/jpa/JPA-findById-getReferenceById</id><content type="html" xml:base="http://localhost:4000/jpa/JPA-findById-getReferenceById/"><![CDATA[<p>findById()와 getReferenceById()는 검색할 때 사용하며 비슷한 기능을 한다. 하지만 조회하는 기본 메커니즘이 다르다.</p>

<h2 id="findbyid">findById()</h2>

<p>findById()는 실제 DB를 바로 조회해서 필요한 데이터를 가져온다. (EAGER) 당연히 반환되는 객체도 데이터가 매핑되어있는 실제 엔티티 객체이다.</p>

<h2 id="getreferencebyid">getReferenceById()</h2>

<p>getReferenceById()는 주어진 <strong>식별자를 가진 엔티티에 대한 참조를 반환</strong>한다. 이 메소드는 데이터베이스에 충돌하지 않고 항상 <code class="language-plaintext highlighter-rouge">프록시</code>를 반환한다. LAZY로 가져온 엔티티가 데이터베이스에 존재하지 않으면 실제 엑세스 시 EntityNotFountException을 발생 시킨다.</p>

<p>getReferenceById()가 낯설을 수도 있는데 이전에 사용하던 <strong>getOne()</strong>과 같다. 현재 getOne()은 deprecate되었고 getOne() 대신 getReferenceById()를 사용하라고 공식 문서에 나와있다. (스프링부트 2.7 버전부터 삭제되었다.)</p>

<h2 id="findbyid-vs-getreferencebyid">findById() vs getReferenceById()</h2>

<p>이 방법들의 차이점은 <code class="language-plaintext highlighter-rouge">성능</code>이다. getReferenceById()는 프록시로 반환하며 실제로 액세스 할 때까지 DB에 도달하지 않으므로 성능적인 면에서 좋다.</p>]]></content><author><name>승미</name></author><category term="Jpa" /><category term="Jpa" /><summary type="html"><![CDATA[findById()와 getReferenceById()는 검색할 때 사용하며 비슷한 기능을 한다. 하지만 조회하는 기본 메커니즘이 다르다.]]></summary></entry><entry><title type="html">DTO 변환 시, ModelMapper 사용해도 괜찮을까?</title><link href="http://localhost:4000/springboot/Mapper/" rel="alternate" type="text/html" title="DTO 변환 시, ModelMapper 사용해도 괜찮을까?" /><published>2023-04-15T00:00:00+09:00</published><updated>2023-04-15T00:00:00+09:00</updated><id>http://localhost:4000/springboot/Mapper</id><content type="html" xml:base="http://localhost:4000/springboot/Mapper/"><![CDATA[<h2 id="개요">개요</h2>

<p>ModelMapper는 Entity를 DTO로 변환할 때, 또는 그 반대 경우에 사용한다. ModelMapper를 사용하면 코드가 간단해진다는 장점이 있다. 그렇다면 ModelMapper를 사용하는게 좋은 방법일까?</p>

<p>이에 대한 의견은 매우 분분하다고 한다. 좋다는 의견도 있고 매우 안좋다는 의견도 있다. 왜 이렇게 의견이 분분한지 그 이유를 알기 위해 ModelMapper의 단점을 알아보자.</p>

<h2 id="modelmapper의-단점">ModelMapper의 단점</h2>

<p>첫째, 모델이 단순하면 Mapper를 사용하는데에 큰 문제가 없다. 하지만, 매핑해야 하는 모델이 복잡해진다면 오히려 Mapper를 적용하는 것에 더 많은 시간과 비용이 들어간다.</p>

<p>둘째, Mapper를 사용하면 컴파일 시점에 오류를 잡을 수 없다.</p>

<p>셋째, ModelMapper는 내부적으로 Reflection을 사용하기 때문에 성능 이슈가 있다.</p>

<p>이러한 점 때문에 개발자들의 의견이 갈린다고 한다. 사실 이에 대한 정답은 없고 프로젝트의 상황에 따라 사용할 수도 있고 안할 수도 있다고 생각한다.</p>

<h2 id="결론">결론</h2>

<p>자바 코드로 매핑 시 약간의 수고로움이 있지만 컴파일 시점에 오류를 잡을 수 있다는 점에서 Mapper를 사용하는 것보단 자바 코드로 매핑하는 것이 좋다고 생각한다.</p>]]></content><author><name>승미</name></author><category term="SpringBoot" /><category term="SpringBoot" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">스프링 부트 실행 시 DB에 데이터 삽입</title><link href="http://localhost:4000/springboot/SQL/" rel="alternate" type="text/html" title="스프링 부트 실행 시 DB에 데이터 삽입" /><published>2023-04-09T00:00:00+09:00</published><updated>2023-04-09T00:00:00+09:00</updated><id>http://localhost:4000/springboot/SQL</id><content type="html" xml:base="http://localhost:4000/springboot/SQL/"><![CDATA[<h2 id="개요">개요</h2>

<p>애플리케이션을 실행 할 때 DB에 데이터가 미리 들어가 있으면 편할 때가 있다. 이때 데이터를 넣는 방법에 대해 알아보자.</p>

<h2 id="설정">설정</h2>

<p>application.yml 또는 application.properties를 <code class="language-plaintext highlighter-rouge">resource 폴더</code> 밑에 두고 아래와 같이 수정한다.</p>

<h3 id="applicationyml">application.yml</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">jpa</span><span class="pi">:</span>
    <span class="na">defer-datasource-initialization</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">sql</span><span class="pi">:</span>
    <span class="na">init</span><span class="pi">:</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="s">always</span>
</code></pre></div></div>

<ul>
  <li>spring.jpa.defer-datasource-initialization: true
    <ul>
      <li>spring boot 2.5 버전 이상부터는 data.sql 스크립트는 Hibernate가 초기화되기 전에 실행된다고 한다. data.sql을 사용하여 Hibernate에 의해 생성된 스키마를 채우려면 해당 값을 true로 설정해야 한다.</li>
    </ul>
  </li>
  <li>sql.init.mode: always
    <ul>
      <li>스크립트 동작 설정</li>
      <li>모든 데이터베이스에 SQL 스크립트를 동작시킨다.</li>
    </ul>
  </li>
</ul>

<h3 id="스크립트-작성">스크립트 작성</h3>

<p>스크립트는 schema.sql, data.sql로 작성할 수 있는데 암묵적으로 schema.sql은 DDL을 작성하고 data.sql은 DML을 작성한다.</p>

<p>data.sql</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">HOUSE_RULE</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">VALUES</span>
    <span class="p">(</span><span class="s1">'반려동물'</span><span class="p">),</span>
    <span class="p">(</span><span class="s1">'흡연'</span><span class="p">);</span>
</code></pre></div></div>

<p>이제 애플리케이션을 실행하면 data.sql이 실행되어 DB에 데이터가 자동으로 들어간다.</p>

<blockquote>
  <p><strong>참고</strong>
<br />
스프링 릴리즈 노트에서 데이터 초기화 기술을 섞는 것을 추천하지 않는다고 되어있다. 운영 단계에서는 data.sql을 사용하지 말고 개발 단계에서만 사용하자.</p>

</blockquote>]]></content><author><name>승미</name></author><category term="SpringBoot" /><category term="SpringBoot" /><category term="DB" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">값 타입</title><link href="http://localhost:4000/jpa/ValueType/" rel="alternate" type="text/html" title="값 타입" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T00:00:00+09:00</updated><id>http://localhost:4000/jpa/ValueType</id><content type="html" xml:base="http://localhost:4000/jpa/ValueType/"><![CDATA[<h2 id="개요">개요</h2>

<p>JPA의 데이터 타입을 크게 분류하면 <code class="language-plaintext highlighter-rouge">엔티티 타입</code>과 <code class="language-plaintext highlighter-rouge">값 타입</code>이 있다.</p>

<ol>
  <li>엔티티 타입
    <ul>
      <li>@Entity로 정의하는 객체</li>
      <li>데이터가 변해도 <strong>식별자</strong>를 통해 <strong>추적 가능</strong></li>
      <li>예) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능</li>
    </ul>
  </li>
  <li>값 타입
    <ul>
      <li>int, Integer, String 처럼 단순히 값으로 사용하는 <strong>자바 기본 타입이나 객체</strong>를 의미</li>
      <li>식별자가 없고 숫자나 문자 같은 속성만 있기 때문에 <strong>추적이 불가능</strong></li>
      <li>예) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체</li>
    </ul>
  </li>
</ol>

<p>값 타입은 3가지로 나눌 수 있다.</p>

<ol>
  <li>기본값 타입
    <ul>
      <li>자바 기본 타입 (int, double)</li>
      <li>래퍼 클래스 (Integer, Long)</li>
      <li>String</li>
    </ul>
  </li>
  <li>임베디드 타입 (embedded type, 복합 값 타입)
    <ul>
      <li>커스텀한 타입</li>
    </ul>
  </li>
  <li>컬렉션 값 타입 (collection value type)</li>
</ol>

<p>값 타입 중 <code class="language-plaintext highlighter-rouge">임베디드 타입</code>과 <code class="language-plaintext highlighter-rouge">값 타입 컬렉션</code> 두 파트가 중요하다. 값 타입에 대해 하나씩 알아보자.</p>

<h2 id="기본값-타입">기본값 타입</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>위 코드에서 String, int 가 값 타입이다.</li>
  <li>Member 엔티티는 id 라는 식별자 값을 가지고 생명주기도 있지만, <strong>값 타입은 식별자 값도 없고 생명주기도 회원 엔티티에 의존</strong>한다. 따라서, 회원 엔티티가 제거되면 name, age 값도 제거된다.</li>
  <li>값 타입은 공유하면 안된다.
    <ul>
      <li>예) 회원 이름 변경 시 다른 회원의 이름도 함께 변경되면 안됨</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><strong>참고</strong> 자바의 기본 타입은 절대 공유X
<br />
int, double 같은 기본 타입(primitive type)은 절대 공유하면 안된다. 기본 타입은 항상 값을 복사한다.</p>

  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="c1">// 값을 복사</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>

<span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>

<span class="c1">// 값이 공유가 되지 않음</span>
<span class="c1">//a=20, b=10</span>
</code></pre></div>  </div>

  <p>Integer같은 래퍼 클래스나 String 같은 특수한 클래스는 공유 가능한 객체이지만 변경X</p>

  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="c1">// 주소값만 넘어가는 것 (참조값만)</span>
<span class="nc">Integer</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>

<span class="n">a</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>

<span class="c1">// 값이 공유됨</span>
<span class="c1">// a=20, b=20</span>
</code></pre></div>  </div>

</blockquote>

<h2 id="임베디드-타입복합-값-타입">임베디드 타입(복합 값 타입)</h2>

<p><strong>새로운 값 타입을 직접 정의해서 사용할 수 있는데 JPA에서는 이것을 <code class="language-plaintext highlighter-rouge">임베디드 타입</code>이라 한다.</strong> 중요한 것은 직접 정의한 임베디드 타입도 int, String 처럼 값 타입이라는 것이다.</p>

<p><strong>임베디드 적용 전</strong></p>

<p>아래 코드는 객체지향적이지 않고 응집력만 떨어뜨린다. 이를 근무 기간, 주소 같은 타입이 있다면 코드가 더 명확해질 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">// 근무 기간</span>
    <span class="nd">@Temporal</span><span class="o">(</span><span class="nc">TemporalType</span><span class="o">.</span><span class="na">DATE</span><span class="o">)</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span> <span class="n">startDate</span><span class="o">;</span>
    <span class="nd">@Temporal</span><span class="o">(</span><span class="nc">TemporalType</span><span class="o">.</span><span class="na">DATE</span><span class="o">)</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span> <span class="n">endDate</span><span class="o">;</span>

    <span class="c1">// 집 주소</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">zipcode</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>임베디드 적용 후</strong></p>

<p>새로운 값 타입을 정의하여 회원 엔티티가 의미있고 응집력 있게 변했다. 새로 정의한 값 타입들은 재사용할 수 없고 응집도도 아주 높다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">// 근무 기간</span>
    <span class="nd">@Embedded</span> <span class="nc">Period</span> <span class="n">workPeriod</span><span class="o">;</span>

    <span class="c1">// 집 주소</span>
    <span class="nd">@Embedded</span> <span class="nc">Address</span> <span class="n">homeAddress</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Period</span> <span class="o">{</span>
    <span class="nd">@Temporal</span><span class="o">(</span><span class="nc">TemporalType</span><span class="o">.</span><span class="na">DATE</span><span class="o">)</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span> <span class="n">startDate</span><span class="o">;</span>
    <span class="nd">@Temporal</span><span class="o">(</span><span class="nc">TemporalType</span><span class="o">.</span><span class="na">DATE</span><span class="o">)</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span> <span class="n">endDate</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">zipcode</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/79130276/226816851-b5fa8202-86b6-4825-8615-95f2e5a68212.png" alt="1" /></p>

<p>회원 - 컴포지션 관계 UML</p>

<h3 id="임베디드-타입-사용법">임베디드 타입 사용법</h3>

<p>임베디드 타입을 사용하려면 2가지 어노테이션이 필요하다.</p>

<ul>
  <li><strong>@Embeddable</strong>: 값 타입을 정의하는 곳에 표시</li>
  <li><strong>@Embedded</strong>: 값 타입을 사용하는 곳에 표시</li>
</ul>

<p>그리고 임베디드 타입은 <strong>기본 생성자가 필수</strong>이다. 임베디드 타입을 포함한 모든 값 타입은 엔티티의 생명주기에 의존하므로 엔티티와 임베디드 타입의 관계를 UML 다이어그램으로 표현하면 컴포지션 관계가 된다.</p>

<blockquote>
  <p><strong>참고</strong> 하이버네이트는 임베디드 타입을 컴포넌트라 한다.</p>

</blockquote>

<h3 id="임베디드-타입의-장점">임베디드 타입의 장점</h3>

<ul>
  <li>재사용성</li>
  <li>높은 응집도</li>
  <li>Period.isWork()처럼 해당 값 타입만 사용하는 의미 있는 메소드를 만들 수 있음</li>
  <li>임베디드 타입을 포함한 모든 값 타입은, 값 타입을 소유한 엔티티에 생명주기를 의존함</li>
</ul>

<h3 id="임베디드-타입과-테이블-매핑">임베디드 타입과 테이블 매핑</h3>

<p>임베디드 타입은 DB의 테이블에 어떻게 매핑할까? 임베디드 타입은 엔티티의 값일 뿐이다. 임베디드 타입을 사용하기 전과 후에 <strong>매핑하는 테이블은 같다</strong>. 임베디드 타입 덕분에 객체와 테이블을 아주 세밀하게 매핑하는 것이 가능하다. 잘 설계한 ORM 애플리케이션은 매핑한 테이블의 수보다 클래스의 수가 더 많다.</p>

<p><img src="https://user-images.githubusercontent.com/79130276/226816858-c488b2cb-32a6-4513-8d00-7cb73ed27130.png" alt="2" /></p>

<h3 id="임베디드-타입과-연관관계">임베디드 타입과 연관관계</h3>

<p>임베디드 타입은 값 타입을 포함하거나 엔티티를 참조할 수 있다.</p>

<blockquote>
  <p><strong>참고</strong>
<br />
엔티티는 공유될 수 있으므로 참조한다고 표현하고, 값 타입은 특정 주인에 소속되고 논리적인 개념상 공유되지 않아 포함된다고 표현했다.</p>

</blockquote>

<p><img src="https://user-images.githubusercontent.com/79130276/226816859-8599d4f1-11c9-455f-8881-15a8bb67fe94.png" alt="3" /></p>

<p>아래 코드와 같이 embeddable 안에 엔티티를 정의할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ZIPCODE"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">zipcode</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Member</span> <span class="n">member</span><span class="o">;</span> <span class="c1">// 엔티티</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="attributeoverride-속성-재정의">@AttributeOverride: 속성 재정의</h3>

<p>한 엔티티에서 같은 임베디드 타입을 사용하면 컬럼명이 중복된다. 이때 엔티티에 AttributeOverrides, @AttributeOverride를 사용해서 컬럼명 속성을 재정의하면 중복되게 사용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="nc">Address</span> <span class="n">homeAddress</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="nd">@AttributeOverrides</span><span class="o">({</span>
        <span class="nd">@AttributeOverride</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"city"</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"company_city"</span><span class="o">)),</span>
        <span class="nd">@AttributeOverride</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"street"</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"company_street"</span><span class="o">)),</span>
        <span class="nd">@AttributeOverride</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"zipcode"</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"company_zipcode"</span><span class="o">))</span>
    <span class="o">})</span>
    <span class="nc">Address</span> <span class="n">companyAddress</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="임베디드-타입과-null">임베디드 타입과 null</h3>

<p>임베디드 타입의 값이 null이면 매핑한 컬럼 값은 모두 null이 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">member</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<p>회원 테이블의 주소와 관련된 city, street, zipcode 컬럼 값은 모두 null이 된다.</p>

<h2 id="값-타입과-불변-객체">값 타입과 불변 객체</h2>

<p>값 타입은 복잡한 객체 세상을 조금이라도 단순화하려고 만든 개념이다. 따라서, 값 타입은 단순하고 안전하게 다룰 수 있어야 한다.</p>

<h3 id="값-타입-공유-참조">값 타입 공유 참조</h3>

<p>임베디드 타입 같은 값 타입을 여러 엔티티에서 공유하면 위험하다.</p>

<p><img src="https://user-images.githubusercontent.com/79130276/226816861-95347912-292a-4e44-86de-1d44240808a0.png" alt="4" /></p>

<p>아래코드는 값 타입을 공유 시 발생할 수 있는 문제점을 나타내었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">);</span>

<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

<span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member2</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member2"</span><span class="o">);</span>
<span class="n">member2</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

<span class="n">member</span><span class="o">.</span><span class="na">getHomeAddress</span><span class="o">().</span><span class="na">setCity</span><span class="o">(</span><span class="s">"newCity"</span><span class="o">);</span>
</code></pre></div></div>

<p>member에 대한 주소값을 변경하려고 했지만 실제론 member2에 있는 주소값까지 변경이 된다. 이런 버그는 찾아내기 매우 힘들다. 이렇듯 뭔가를 수정했는데 예상치 못한 곳에서 문제가 발생하는 것을 부작용(side effect)이라 한다. 부작용을 막으려면 값을 복사해서 사용하면 된다.</p>

<h3 id="값-타입-복사">값 타입 복사</h3>

<p>값 타입의 실제 인스턴스인 값을 공유하는 것은 위험하다. 대신 값(인스턴스)을 복사해서 사용해야 한다.</p>

<p><img src="https://user-images.githubusercontent.com/79130276/226816864-1312fc69-42b3-4b0e-8232-3f27a110323e.png" alt="5" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">);</span>

<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

<span class="nc">Address</span> <span class="n">copyAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="n">address</span><span class="o">.</span><span class="na">getCity</span><span class="o">(),</span> <span class="n">address</span><span class="o">.</span><span class="na">getStreet</span><span class="o">(),</span> <span class="n">address</span><span class="o">.</span><span class="na">getZipcode</span><span class="o">());</span>

<span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member2</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member2"</span><span class="o">);</span>
<span class="n">member2</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="n">copyAddress</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

<span class="n">member</span><span class="o">.</span><span class="na">getHomeAddress</span><span class="o">().</span><span class="na">setCity</span><span class="o">(</span><span class="s">"newCity"</span><span class="o">);</span>
</code></pre></div></div>

<p>항상 값을 복사해서 사용하면 공유 참조로 인해 발생하는 부작용을 피할 수 있다. 문제는 임베디드 타입처럼 <strong>직접 정의한 값 타입은 자바의 기본 타입이 아니라 객체 타입</strong>이다. 따라서, 한계가 발생한다.</p>

<p><strong>기본 타입 값 복사</strong></p>

<p>자바 기본 타입에 값을 대입하면 값을 복사한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
<span class="c1">// a = 10, b = 4</span>
</code></pre></div></div>

<p><strong>객체 타입 참조 복사</strong></p>

<p>객체를 복사할 땐 참조 값을 넘겨주기 때문에 인스턴스가 공유된다. <strong>객체 타입은 참조 값을 직접 대입하는 것을 막을 방법이 없다. 객체의 공유 참조는 피할 수 없다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Address</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"old"</span><span class="o">);</span>
<span class="nc">Address</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
<span class="n">b</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="s">"new"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="불변-객체">불변 객체</h3>

<p>객체 타입을 수정할 수 없게 만들면 <strong>부작용을 원천 차단</strong>할 수 있다. 따라서, <strong>값 타입은 불변 객체(immutable object)로 설계</strong>해야 한다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">불변 객체</code>란 생성 시점 이후 절대 값을 변경할 수 없는 객체를 의미</strong>한다. 생성자로만 값을 설정하고 수정자(Setter)를 만들지 않으면 된다. 즉, Setter를 없애거나 Setter를 public에서 private로 만들면 된다. <strong>불변</strong>이라는 작은 제약으로 부작용이라는 큰 재앙을 막을 수 있다.</p>

<blockquote>
  <p><strong>참고</strong>
<br />
Integer, String은 자바가 제공하는 대표적인 불변 객체이다.</p>

</blockquote>

<h2 id="값-타입의-비교">값 타입의 비교</h2>

<p>값 타입은 인스턴스가 달라도 그 안에 값이 같으면 같은 것으로 봐야 한다. 따라서 값 타입을 비교할 때는 a.equals(b)를 사용해서 동등성 비교를 해야 한다. 물론 Address의 equals() 메소드를 재정의해야 한다. 값 타입의 equals() 메소드를 재정의할 때는 보통 모든 필드의 값을 비교하도록 구현한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a==b : true</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>

<span class="c1">// a==b : false</span>
<span class="nc">Address</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"서울시"</span><span class="o">);</span>
<span class="nc">Address</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"서울시"</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a == b: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">));</span> <span class="c1">// false</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a equals b: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">b</span><span class="o">)));</span> <span class="c1">// false</span>
<span class="c1">// equals의 기본 비교는 == 이기 때문에 false가 나온다</span>

<span class="c1">// equals 를 오버라이드 해서 사용해야 true가 나옴</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Address</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
    <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">city</span><span class="o">,</span> <span class="n">address</span><span class="o">.</span><span class="na">city</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
            <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">street</span><span class="o">,</span> <span class="n">address</span><span class="o">.</span><span class="na">street</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
            <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">zipcode</span><span class="o">,</span> <span class="n">address</span><span class="o">.</span><span class="na">zipcode</span><span class="o">);</span>
<span class="o">}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a equals b: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">b</span><span class="o">)));</span> <span class="c1">// true</span>
</code></pre></div></div>

<blockquote>
  <p><strong>참고</strong></p>

  <ul>
    <li><strong>동일성(identity) 비교:</strong> 인스턴스의 참조값을 비교, == 사용</li>
    <li><strong>동등성(equivalence) 비교</strong>: 인스턴스의 값을 비교, equals() 사용</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>참고</strong>
<br />
자바에서 equals()를 재정의하면 hashCode()도 재정의하는 것이 안전하다. 그렇지 않으면 해시를 사용하는 컬렉션(HashSet, HashMap)이 정상 동작하지 않는다. 자바 IDE에는 대부분 equals, hashCode 메소드를 자동으로 생성해주는 기능이 있다.</p>

</blockquote>

<h2 id="값-타입-컬렉션">값 타입 컬렉션</h2>

<p>값 타입을 하나 이상 저장할 때 사용한다. @ElementCollection, @CollectionTable 어노테이션을 사용하면 된다.</p>

<p>데이터베이스는 컬렉션을 같은 테이블에 저장할 수 없기 때문에 컬렉션을 저장하기 위한 별도의 테이블이 필요하다.</p>

<p><img src="https://user-images.githubusercontent.com/79130276/226816866-471f6a55-2688-43a5-946d-72522738eba3.png" alt="6" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">homeAddress</span><span class="o">;</span>

    <span class="nd">@ElementCollection</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"FAVORITE_FOOD"</span><span class="o">,</span> <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">))</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"FOOD_NAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">favoriteFoods</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

		<span class="c1">// 결론적으로 사용하면 안된다</span>
    <span class="nd">@ElementCollection</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ADDRESS"</span><span class="o">,</span> <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">))</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">addressHistory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"homeCity"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>

<span class="n">member</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"치킨"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"족발"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"피자"</span><span class="o">);</span>

<span class="n">member</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"old1"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>
<span class="n">member</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"old2"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>

<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hibernate: 
    /* insert jpabook.jpashop.domain.Member
        */ insert 
        into
            Member
            (city, street, zipcode, username, MEMBER_ID) 
        values
            (?, ?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row jpabook.jpashop.domain.Member.addressHistory */ insert 
        into
            ADDRESS
            (MEMBER_ID, city, street, zipcode) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row jpabook.jpashop.domain.Member.addressHistory */ insert 
        into
            ADDRESS
            (MEMBER_ID, city, street, zipcode) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
        into
            FAVORITE_FOOD
            (MEMBER_ID, FOOD_NAME) 
        values
            (?, ?)
Hibernate: 
    /* insert collection
        row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
        into
            FAVORITE_FOOD
            (MEMBER_ID, FOOD_NAME) 
        values
            (?, ?)
Hibernate: 
    /* insert collection
        row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
        into
            FAVORITE_FOOD
            (MEMBER_ID, FOOD_NAME) 
        values
            (?, ?)
5월 02, 2022 10:20:42 오전 org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:tcp://localhost/~/test]

Process finished with exit code 0
</code></pre></div></div>

<h3 id="값-타입-컬렉션-사용">값 타입 컬렉션 사용</h3>

<ul>
  <li>값 타입 저장 예제</li>
  <li>값 타입 조회 예제
    <ul>
      <li>값 타입 컬렉션도 <strong>지연 로딩</strong> 전략 사용</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"homeCity"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>
    
  <span class="n">member</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"치킨"</span><span class="o">);</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"족발"</span><span class="o">);</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"피자"</span><span class="o">);</span>
    
  <span class="n">member</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"old1"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"old2"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>
    
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    
  <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
  <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=============== START =============="</span><span class="o">);</span>
  <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">addressHistory</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">();</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">Address</span> <span class="n">address</span> <span class="o">:</span> <span class="n">addressHistory</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"address = "</span> <span class="o">+</span> <span class="n">address</span><span class="o">.</span><span class="na">getCity</span><span class="o">());</span>
  <span class="o">}</span>
    
  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">favoriteFoods</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">();</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">favoriteFood</span> <span class="o">:</span> <span class="n">favoriteFoods</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"favoriteFood = "</span> <span class="o">+</span> <span class="n">favoriteFood</span><span class="o">);</span>
  <span class="o">}</span>
    
  <span class="n">tx</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</code></pre></div>    </div>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Hibernate: 
      /* insert jpabook.jpashop.domain.Member
          */ insert 
          into
              Member
              (city, street, zipcode, username, MEMBER_ID) 
          values
              (?, ?, ?, ?, ?)
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.addressHistory */ insert 
          into
              ADDRESS
              (MEMBER_ID, city, street, zipcode) 
          values
              (?, ?, ?, ?)
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.addressHistory */ insert 
          into
              ADDRESS
              (MEMBER_ID, city, street, zipcode) 
          values
              (?, ?, ?, ?)
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
          into
              FAVORITE_FOOD
              (MEMBER_ID, FOOD_NAME) 
          values
              (?, ?)
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
          into
              FAVORITE_FOOD
              (MEMBER_ID, FOOD_NAME) 
          values
              (?, ?)
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
          into
              FAVORITE_FOOD
              (MEMBER_ID, FOOD_NAME) 
          values
              (?, ?)
  =============== START ==============
  Hibernate: 
      select
          member0_.MEMBER_ID as member_i1_7_0_,
          member0_.city as city2_7_0_,
          member0_.street as street3_7_0_,
          member0_.zipcode as zipcode4_7_0_,
          member0_.username as username5_7_0_ 
      from
          Member member0_ 
      where
          member0_.MEMBER_ID=?
  Hibernate: 
      select
          addresshis0_.MEMBER_ID as member_i1_0_0_,
          addresshis0_.city as city2_0_0_,
          addresshis0_.street as street3_0_0_,
          addresshis0_.zipcode as zipcode4_0_0_ 
      from
          ADDRESS addresshis0_ 
      where
          addresshis0_.MEMBER_ID=?
  address = old1
  address = old2
  Hibernate: 
      select
          favoritefo0_.MEMBER_ID as member_i1_5_0_,
          favoritefo0_.FOOD_NAME as food_nam2_5_0_ 
      from
          FAVORITE_FOOD favoritefo0_ 
      where
          favoritefo0_.MEMBER_ID=?
  favoriteFood = 족발
  favoriteFood = 치킨
  favoriteFood = 피자
  5월 02, 2022 10:48:36 오전 org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
  INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:tcp://localhost/~/test]
    
  Process finished with exit code 0
</code></pre></div>    </div>
  </li>
  <li>
    <p>값 타입 수정 예제</p>

    <p>**[예제1] Set<기본값 타입=""> 수정**</기본값></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=============== START =============="</span><span class="o">);</span>
  <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    
  <span class="c1">// homeCity -&gt; newCity</span>
  <span class="c1">// findMember.getHomeAddress().setCity("newCity");</span>
    
  <span class="c1">// 위의 코드처럼 setter를 사용해서 값을 변경하면 부작용(side effect) 발생</span>
  <span class="c1">// side effect 와 같은 버그는 매우 잡기 힘들다.</span>
  <span class="c1">// 따라서, 아래와 같이 아예 새로 넣어줘야 한다.</span>
  <span class="nc">Address</span> <span class="n">a</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getHomeAddress</span><span class="o">();</span>
  <span class="n">findMember</span><span class="o">.</span><span class="na">setHomeAddress</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"newCity"</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">getStreet</span><span class="o">(),</span> <span class="n">a</span><span class="o">.</span><span class="na">getZipcode</span><span class="o">()));</span>
    
  <span class="c1">//치킨 -&gt; 한식</span>
  <span class="n">findMember</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="s">"치킨"</span><span class="o">);</span>
  <span class="n">findMember</span><span class="o">.</span><span class="na">getFavoriteFoods</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"한식"</span><span class="o">);</span>
</code></pre></div>    </div>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  =============== START ==============
  Hibernate: 
      select
          member0_.MEMBER_ID as member_i1_7_0_,
          member0_.city as city2_7_0_,
          member0_.street as street3_7_0_,
          member0_.zipcode as zipcode4_7_0_,
          member0_.username as username5_7_0_ 
      from
          Member member0_ 
      where
          member0_.MEMBER_ID=?
  Hibernate: 
      select
          favoritefo0_.MEMBER_ID as member_i1_5_0_,
          favoritefo0_.FOOD_NAME as food_nam2_5_0_ 
      from
          FAVORITE_FOOD favoritefo0_ 
      where
          favoritefo0_.MEMBER_ID=?
  Hibernate: 
      /* update
          jpabook.jpashop.domain.Member */ update
              Member 
          set
              city=?,
              street=?,
              zipcode=?,
              username=? 
          where
              MEMBER_ID=?
  Hibernate: 
      /* delete collection row jpabook.jpashop.domain.Member.favoriteFoods */ delete 
          from
              FAVORITE_FOOD 
          where
              MEMBER_ID=? 
              and FOOD_NAME=?
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.favoriteFoods */ insert 
          into
              FAVORITE_FOOD
              (MEMBER_ID, FOOD_NAME) 
          values
              (?, ?)
  5월 02, 2022 11:16:33 오전 org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
  INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:tcp://localhost/~/test]
    
  Process finished with exit code 0
</code></pre></div>    </div>

    <p>**[예제2] List<임베디드 타입=""> 수정**</임베디드></p>

    <p>Set<기본값 타입="">처럼 삭제 후 수정이 잘 될 것 같지만 그렇지 않다.</기본값></p>

    <p>해당되는 값을 모두 삭제 후 모든 값을 다시 넣어준다</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//remove 는 equals()로 비교함. 따라서, equals()와 hashcode()를 잘 정의해야 함</span>
  <span class="n">findMember</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"old1"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>
  <span class="n">findMember</span><span class="o">.</span><span class="na">getAddressHistory</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"newCity1"</span><span class="o">,</span> <span class="s">"street"</span><span class="o">,</span> <span class="s">"10000"</span><span class="o">));</span>
</code></pre></div>    </div>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  =============== START ==============
  Hibernate: 
      select
          member0_.MEMBER_ID as member_i1_7_0_,
          member0_.city as city2_7_0_,
          member0_.street as street3_7_0_,
          member0_.zipcode as zipcode4_7_0_,
          member0_.username as username5_7_0_ 
      from
          Member member0_ 
      where
          member0_.MEMBER_ID=?
  Hibernate: 
      select
          addresshis0_.MEMBER_ID as member_i1_0_0_,
          addresshis0_.city as city2_0_0_,
          addresshis0_.street as street3_0_0_,
          addresshis0_.zipcode as zipcode4_0_0_ 
      from
          ADDRESS addresshis0_ 
      where
          addresshis0_.MEMBER_ID=?
  Hibernate: 
      /* delete collection jpabook.jpashop.domain.Member.addressHistory */ delete 
          from
              ADDRESS 
          where
              MEMBER_ID=?
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.addressHistory */ insert 
          into
              ADDRESS
              (MEMBER_ID, city, street, zipcode) 
          values
              (?, ?, ?, ?)
  Hibernate: 
      /* insert collection
          row jpabook.jpashop.domain.Member.addressHistory */ insert 
          into
              ADDRESS
              (MEMBER_ID, city, street, zipcode) 
          values
              (?, ?, ?, ?)
  5월 02, 2022 11:16:56 오전 org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
  INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:tcp://localhost/~/test]
    
  Process finished with exit code 0
</code></pre></div>    </div>
  </li>
  <li>참고: 값 타입 컬렉션은 영속성 전에(Cascade) + 고아 객체 제거 기능을 필수로 가진다고 볼 수 있다.</li>
</ul>

<h3 id="값-타입-컬렉션의-제약사항">값 타입 컬렉션의 제약사항</h3>

<p>값 타입은 엔티티와 다르게 식별자 개념이 없기 때문에 값을 변경하면 추적이 어렵다. 값 타입 컬렉션에 변경 사항이 발생하면, 주인 엔티티와 연관된 모든 데이터를 삭제하고, 값 타입 컬렉션에 있는 현재 값을 모두 다시 저장한다.</p>

<p>값 타입 컬렉션을 매핑하는 테이블은 모든 컬럼을 묶어서 기본키를 구성해야 한다. (null 입력X, 중복 저장X)</p>

<h3 id="값-타입-컬렉션-대안">값 타입 컬렉션 대안</h3>

<p>실무에서는 상황에 따라 <strong>값 타입 컬렉션 대신에 일대다 관계를 고려</strong>한다. 일대다 관계를 위한 엔티티를 만들고, 여기에서 값 타입을 사용하면 영속성 전이(Cascade) + 고아 객체 제거를 사용해서 값 타입 컬렉션 처럼 사용할 수 있다. 예) AddressEntity</p>

<p><strong>[전] 값 타입 컬렉션</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">homeAddress</span><span class="o">;</span>

    <span class="nd">@ElementCollection</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"FAVORITE_FOOD"</span><span class="o">,</span> <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">))</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"FOOD_NAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">favoriteFoods</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@ElementCollection</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ADDRESS"</span><span class="o">,</span> <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">))</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">addressHistory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="nd">@Getter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">zipcode</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Address</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">city</span><span class="o">,</span> <span class="n">address</span><span class="o">.</span><span class="na">city</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">street</span><span class="o">,</span> <span class="n">address</span><span class="o">.</span><span class="na">street</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">zipcode</span><span class="o">,</span> <span class="n">address</span><span class="o">.</span><span class="na">zipcode</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">city</span><span class="o">,</span> <span class="n">street</span><span class="o">,</span> <span class="n">zipcode</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>[후] 일대다로 변경 (실무에서 많이 사용)</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">homeAddress</span><span class="o">;</span>

    <span class="nd">@ElementCollection</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"FAVORITE_FOOD"</span><span class="o">,</span> <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">))</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"FOOD_NAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">favoriteFoods</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">,</span> <span class="n">orphanRemoval</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AddressEntity</span><span class="o">&gt;</span> <span class="n">addressHistory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ADDRESS"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressEntity</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AddressEntity</span><span class="o">(</span><span class="nc">String</span> <span class="n">city</span><span class="o">,</span> <span class="nc">String</span> <span class="n">street</span><span class="o">,</span> <span class="nc">String</span> <span class="n">zipcode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="n">city</span><span class="o">,</span> <span class="n">street</span><span class="o">,</span> <span class="n">zipcode</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>승미</name></author><category term="Jpa" /><category term="Jpa" /><summary type="html"><![CDATA[개요]]></summary></entry></feed>